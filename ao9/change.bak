;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname change) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))


(define (make-factor fac pfac)
     (cond [(empty? pfac) empty]
           [(>= (- fac (first pfac)) 0)
               (cons (first pfac)
                     (make-factor (- fac
                                (first pfac))
                             pfac))]
           [else
                (make-factor fac
                        (rest pfac))]))

(define (euclid-gcd n m)
        (cond [(zero? m) n]
              [else (euclid-gcd m (remainder n m))]))
                    


(define (contains mainlist checklist listw)
        (cond [(empty? checklist) (append listw   mainlist)]
              [(empty? mainlist)                      "a"]
              [(< (first mainlist) (first checklist)) "a"]
              [(= (first mainlist) (first checklist))
                                  (contains (rest mainlist)
                                           (rest checklist)
                                                     listw)]
              [else    (contains (rest mainlist)
                                checklist
                                    (append listw
                                          (list (first mainlist))))]))

               

(define (replace-multiples target pos prevpos changelist)
  
       
     (cond [(empty? pos)                     changelist]
           [else 
               (local [(define minrep (contains changelist
                                      (make-factor (first pos)
                                                   prevpos)
                                      empty))
                       (define gcd (euclid-gcd (first pos)
                                               (first prevpos)))
                       (define corrisponding
                             (contains changelist
                                      (make-list (/ (first pos)
                                                    gcd)
                                                 (first prevpos))
                                      empty))]
           (cond 
           [(= (first pos) 1) (replace-multiples
                                  target
                                  (rest pos)
                                  (list (first pos))
                                  (make-list target 1))]
           
           [(list? minrep)
                (replace-multiples target pos prevpos
                                  (append (list (first pos))
                                               minrep))]
           [(list? corrisponding)
                (replace-multiples target pos prevpos
                                  (append (make-list
                                             (/ (first prevpos)
                                                gcd)
                                             (first pos))
                                          corrisponding))]
           [else
               (replace-multiples target (rest pos)
                                 (append (list (first pos))
                                               prevpos)
                                 changelist)]))]))

(define (fewest-coins target denomination)
  (replace-multiples target denomination '(1) empty))

(check-expect (fewest-coins 45 '(1 5 10 25 100 200))
              '(25 10 10))
(check-expect (fewest-coins 12 '(1 3 4))
              '(4 4 4))
