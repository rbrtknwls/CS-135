;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname roster) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; ******************************************
;;   Robert (Robbie) Knowles (20878339)
;;   CS 135 Fall 2020
;;   Assigment 06, Problem 1(A-D)
;; ******************************************

;; ==================================
;; struct and data definitions For Q1
;; =================================

;; A StudentID is a Nat with at most 8 digits
;;                  (i.e. 0 <= id <= 99999999)

;; A Grade is one of:
;; * false
;; * Nat
;;   Requires: Nat is between 0 and 100 (inclusive)

(define-struct student (id name grade))
;; A Student is a (make-student StudentID Str Grade)


(define-struct rnode (student left right))
;; A Roster Node (RN) is a (make-rnode Student Roster Roster)
;; Requires: all students in the left subtree have
;;                                    an ID < student's ID
;;           all students in the right subtree have
;;                                    an ID > student's ID

;; A Roster is one of 
;; * empty
;; * RN


;; =================================
;; constants used in Q1 examples
;; =================================

(define beth (make-student 12345678 "Beth" 96))
(define jenny (make-student 08675309 "Jenny" 81))
(define john1 (make-student 48975311 "John" 95))
(define jenny/new (make-student 08675309 "Jen" 81))
(define john2 (make-student 20488192 "John" false))

(define sample-roster
  (make-rnode beth ; root
              (make-rnode jenny empty empty)   ; left child
              (make-rnode john1 empty empty))) ; right child

(define sample-roster-2
  (make-rnode beth 
              (make-rnode jenny/new empty empty)
              (make-rnode john1
                          (make-rnode john2 empty empty)
                          empty)))



;; =================================
;;
;; Question 1A
;;
;; =================================


;; (in-interval? canidate int) Consumes a canidate 
;;   and checks to see if it is bounded within the given
;;  interval (int)
;; Examples:
(check-expect (in-interval? 42
              (make-interval 'dontcare 'dontcare)) true)
(check-expect (in-interval? 34
              (make-interval 35 'dontcare)) false)
(check-expect (in-interval? 34
              (make-interval 'dontcare 35)) true)
;; in-interval?: Num Interval -> Bool
(define (in-interval? canidate int)
  (cond [(and (symbol? (interval-hi int))
              (symbol? (interval-lo int)))
                                                    true]
        [(symbol? (interval-hi int))
         
           (cond [(>= canidate (interval-lo int))
                                                    true]
                 [else                             false])]
                 
        [(symbol? (interval-lo int))
              
           (cond [(<= canidate (interval-hi int))
                                                    true]
                 [else                             false])]
                 
        [(and (>= canidate (interval-lo int))
              (<= canidate (interval-hi int)))
                                                    true]
        [else                                      false]))

